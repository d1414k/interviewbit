// https://www.interviewbit.com/problems/maximum-area-of-triangle/

public class Solution {
    int r[];// = new int[2]{-1,-1};//min and max column no
    int g[];// = new int[2]{-1,-1};
    int b[];// = new int[2]{-1,-1};
    public int solve(String[] A) {
        if(A == null || A.length <= 1)
            return 0;
        int n = A.length;
        int m = A[0].length();
        r = new int[]{-1,-1};//min and max column no
        g = new int[]{-1,-1};
        b = new int[]{-1,-1};
        int [][] maxRow = new int[m][3];// each column what is max value for r g b
        for(int j = 0 ; j < m ; j++){
            for(int i = 0 ; i < n ; i++){
                char c = A[i].charAt(j);
                if(c == 'r' && r[0] == -1){
                    r[0] = j;
                }else if(c == 'g' && g[0] == -1){
                    g[0] = j;                
                }else if(c == 'b' && b[0] == -1){
                    b[0] = j;
                }
            }        
        }
        for(int j = m-1 ; j >=0 ; j--){
            for(int i = 0 ; i < n ; i++){
                char c = A[i].charAt(j);
                if(c == 'r' && r[1] == -1){
                    r[1] = j;
                }else if(c == 'g' && g[1] == -1){
                    g[1] = j;                
                }else if(c == 'b' && b[1] == -1){
                    b[1] = j;
                }
            }        
        }
        // for each column find pair and then area
        int res = 0;
        for(int j = m-1 ; j >= 0 ; j--){
            for(int i = 0 ; i < n ; i++){
                for(int k = i + 1 ; k < n ; k++){
                    char ch1 = A[i].charAt(j),ch2 = A[k].charAt(j);
                    if(ch1 != ch2){
                        res = Math.max(res,(int)Math.ceil(((k-i+1)*height(ch1,ch2,j))/2.0));
                        //System.out.println(res+" "+i+" "+j+" "+ch1+" "+ch2);
                    }
                }
            }        
        }
        return res;
    }
    int height(char ch1, char ch2, int col){
        char ch3 = find(ch1,ch2); //System.out.println(ch3);
        if(ch3 == 'r')
            return Math.max((r[0] == -1 || r[0] >= col) ? 0 : col-r[0]+1, (r[1] == -1 || r[1] <= col) ? 0 : r[1]-col+1);
        if(ch3 == 'g')
            return Math.max((g[0] == -1 || g[0] >= col) ? 0 : col-g[0]+1, (g[1] == -1 || g[1] <= col) ? 0 : g[1]-col+1);
        return Math.max((b[0] == -1 || b[0] >= col) ? 0 : col-b[0]+1, (b[1] == -1 || b[1] <= col) ? 0 : b[1]-col+1);
    }
    char find(char ch1,char ch2){
        if((ch1 == 'r' && ch2 == 'g') || (ch1 == 'g' && ch2 == 'r'))
            return 'b';
        if((ch1 == 'r' && ch2 == 'b') || (ch1 == 'b' && ch2 == 'r'))
            return 'g';
        return 'r';
    }
}
