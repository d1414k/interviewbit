// https://www.interviewbit.com/problems/maximum-area-of-triangle/

public class Solution {
    public int solve(String[] A) {
        if(A == null || A.length <= 1)
            return 0;
        GridSummary gs = new GridSummary(A.length,A[0].length(),A);
        return gs.getMaxArea();
    }
}

class GridSummary {
    int rows, cols, rMinCol = -1, rMaxCol = -1, gMinCol = -1, gMaxCol = -1,bMinCol = -1,bMaxCol = -1;
    String[] A;
    int [][]colMinMax;// save row nums
    GridSummary(int rows, int cols, String[] A){
        this.rows = rows;
        this.cols = cols;
        this.A = A;
        // r = 0,1 : g = 2,3 : b = 4,5
        colMinMax = new int[cols][6];// [rmin,rmax,gmin,gmax,bmin,bmax]
        for(int j = 0; j < cols ; j++)
            Arrays.fill(colMinMax[j],-1);
        rMinCol = gMinCol = bMinCol = cols;
        for(int j = 0 ; j < cols ; j++){
            for(int i = 0 ; i < rows ; i++){
                switch(A[i].charAt(j)){
                    case 'r':
                        if(colMinMax[j][0] == -1)
                           colMinMax[j][0] = i;
                        colMinMax[j][1] = i; 

                        rMinCol = Math.min(rMinCol,j);
                        rMaxCol = Math.max(rMaxCol,j);
                        break;
                    case 'g':
                        if(colMinMax[j][2] == -1)
                           colMinMax[j][2] = i;
                        colMinMax[j][3] = i; 
                        
                        gMinCol = Math.min(gMinCol,j);
                        gMaxCol = Math.max(gMaxCol,j);
                        break;
                    case 'b':
                        if(colMinMax[j][4] == -1)
                           colMinMax[j][4] = i;
                        colMinMax[j][5] = i; 

                        bMinCol = Math.min(bMinCol,j);
                        bMaxCol = Math.max(bMaxCol,j);
                }
            }
        }
    }
    int getMaxArea(){
        int maxArea = 0;
        for(int j = 0 ; j < cols ; j++){
            int base = 0; 
            // r, g be base
            if((base = getBase(j,0,2)) > 0){
                if(bMinCol != cols)
                    maxArea = Math.max(maxArea, (int)Math.ceil((base*(Math.abs(bMinCol-j)+1)/2.0)));
                if(bMaxCol != -1)
                    maxArea = Math.max(maxArea, (int)Math.ceil((base*(Math.abs(bMaxCol-j)+1)/2.0)));
            }
            // r, b be base
            if((base = getBase(j,0,4)) > 0){
                if(gMinCol != cols)
                    maxArea = Math.max(maxArea, (int)Math.ceil((base*(Math.abs(gMinCol-j)+1)/2.0)));
                if(gMaxCol != -1)
                    maxArea = Math.max(maxArea, (int)Math.ceil((base*(Math.abs(gMaxCol-j)+1)/2.0)));
            }
            // g , b be base
            if((base = getBase(j,2,4)) > 0){
                if(rMinCol != cols)
                    maxArea = Math.max(maxArea, (int)Math.ceil((base*(Math.abs(rMinCol-j)+1)/2.0)));
                if(rMaxCol != -1)
                    maxArea = Math.max(maxArea, (int)Math.ceil((base*(Math.abs(bMaxCol-j)+1)/2.0)));
            }
        }
        return maxArea;
    }
    // check if this can be base
    int getBase(int col, int x, int y){
        if(colMinMax[col][x] == -1 || colMinMax[col][y] == -1 ) return 0;
        int base = 0;
        base = Math.max(base,colMinMax[col][x+1] - colMinMax[col][y]+1);
        base = Math.max(base,colMinMax[col][y+1] - colMinMax[col][x]+1);
        return base;
    }
}
